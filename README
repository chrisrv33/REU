# data

# results

# scripts

### BEST K-MER ###

## download_genomes.sh
SLURM script to download gene annotation and reference genome of *Oryza sativa*

## download_MtPt_genome.sh
downloads Mitochondrial and Plastid DNA of *O sativa* genome

## extract-genomic-features.sh
Preliminary pipeline to extract genomic features from *Oryza sativa* genome.

## keep_prim_annot.py
Python script to filter only the primary annotations, defined as '-00' and '-01' in this particular genome
Copied from CF's data

## count_kmers.sh
SLURM script to count k-mers of intergenic, CDS, reference genome, and repbase

## make_matrix.sh  
SLURM script to make figures in R for kmer_CDS* and kmer_repbase*
Organizing files to make matrices for different K-mers 5-20
Used later for determining the best K

## make_matrix.R
R script for make_matrix.sh
Configurations of the table can be found in this file

## plot_gen_elements.R
R script to plot figures in determining the best k

### MAJOR PIPELINE ###

## 50_accessions.sh
Chosen 50 random accessions to work on
Note: Gshuf does not work on biocluster; use shuf on biocluster instead

## pipeline_final.sh
Download genomes on database and create K-mers (12- and 14-mer) per resequenced accession

## accession_filenames.sh
Creates all DNA-IDs/filenames for the chosen 50 accessions into one .txt file

### AGGREGATES ###

## combining_files.sh
Concatenates all k-mers of all resequences according into one file respective to DNA-ID or filename
Used in conjunction with aggregate_50_acc.sh

## aggregate_50_acc.sh
Aggregates concatenated files from combining_files.sh

## post_processing_edited.sh
Combines all aggregated files into a big table

### GC-CONTENT ### 

## annot_mers_gc_content.py
Calculate score for K-mers and append to beginning of line

## annot_mers_gc_content.sh
Uploads latest version of python (v3), creates new envt, then runs *.py file

### NORMALIZATION & GC CORRECTION ###

## Normalize.R
Normalize raw counts to count per million

## Normalize.sh
Shell script to run Normalize.R 

## GC_correct.R
GC-correcting normalized data table using the "binning approach"

## GC_correct.sh
Shell script to run GC_correct.R

## calc_GC.py
Python script that calculates GC-content for both raw and GC-corrected data tables.

## calc_GC_raw.sh
Bash shell to run calc_GC.py with raw aggregated data tables; be wary of file location.

## calc_GC_corr.sh
Bash shell to run calc_GC.py with GC-corrected data tables.

### GC CORRECTION COMPARISON ###

## 12mer_diff_GC_content.R
Creates a density plot comparing pre- and post-GC-correction for 12-mers. Uses *.sh to run into the cluster.

## 12mer_diff_GC_content.sh
Uses *.R to run the script

## 14mer_diff_GC_content.R
Creates a density plot comparing pre- and post-GC-correction for 14-mers. Uses *.sh to run into the cluster.

## 14mer_diff_GC_content.sh
Uses *.R to run the script

### PRINCIPAL COMPONENT ANALYSIS ###

## extract_admix.sh
Extract rice accession names and their corresponding admixture groups

## PCA_12mer.R
Creates a PCA scatter plot for 12mers. Uses *.sh to run into the cluster.

## PCA_12mer.sh
Uses *.R to run the script

## PCA_14mer.R
Creates a PCA scatter plot for 14mers. Uses *.sh to run into the cluster.

## PCA_14mer.sh
Uses *.R to run the script
